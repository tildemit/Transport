#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, operator, zlib


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        
        # Received sequence numbers
        self.received_nums = []

        # Stored data messages to print out all at once at the end
        self.stored_data = []

        # Acknowledgement extra data field to add to the checksum
        self.ack_num = 2

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()


    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                # Try json.loads. If it fails, the data is corrupt and we ignore this message
                try:
                    msg = json.loads(data.decode('utf-8'))
                except ValueError as e:
                    continue
                else:
                    # If we receive a "done" message from the sender, sort the messages in the
                    # list of stored messages by sequence number. Then, print out the data in
                    # order and send a done message back to the sender
                    if (msg["type"] == "done"):
                        self.stored_data = sorted(self.stored_data, key=lambda d: d['seq_num']) 
                        for msg in self.stored_data:
                            print(msg["data"], end='', flush=True)
                        self.send({"type": "done"})
                        break
                    
                    # Verifying the message has correct fields, else it is corrupted and we ignore
                    if (not "data" in msg or not "checksum" in msg):
                        continue
                    
                    # Cross-reference the messages checksum with the checksum calculation. If they
                    # are not equal ignore this message
                    if (msg["checksum"] != zlib.adler32(bytes((msg["data"] + str(msg["seq_num"])).encode()))):
                        continue

                    # If the sequence number is not in the list of sequence numbers, the message is not a duplicate
                    # and we don't have to ignore it
                    seq_num_rec = msg["seq_num"]
                    if (seq_num_rec not in self.received_nums):
                        # Append the sequence number and the data message to their respective lists                             
                        self.received_nums.append(seq_num_rec)
                        self.stored_data.append(msg)
                        
                # Always send back an ack
                    self.ack_num = self.ack_num + 1
                    self.send({"type": "ack", "ack_num": self.ack_num, "seq_num": msg["seq_num"], "checksum": (str(msg["seq_num"]) + str(self.ack_num)), "start_time": msg["start_time"] })

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
